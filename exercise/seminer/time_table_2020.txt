1回目 05/30/2019
    ソフトウエアプラクティス(pdf資料 2章)
        2.1 DRYの原則
        2.2 KISSの原則
        2.3 ボーイスカウトの規則
        2.4 YAGNIの原則
        2.5 Inside-Outの原則
        2.6 Name and Conquer
        2.7 ノコギリの刃を研ぐ
        2.8 デメテルの法則
        2.9 コンウェイの法則

2回目 06/06/2019
    プログラミング規約(pdf資料 3章)
        3.1 型とインスタンス
            3.1.1 基本型
            3.1.2 enum
            3.1.3 bit field
            3.1.4 class
            3.1.5 struct
            3.1.6 union
            3.1.7 型エイリアス
            3.1.8 const/constexprインスタンス
            3.1.9 型推論
            3.1.10 インスタンスの初期化

3回目 06/27/2019
    プログラミング規約(pdf資料 3章)
        3.2 classとインスタンス
            3.2.1 ファイルの使用方法
            3.2.2 classの規模
            3.2.3 アクセスレベルと隠蔽化
            3.2.4 継承/派生
            3.2.5 非静的なメンバ変数/定数の初期化
            3.2.6 静的なメンバ変数/定数の初期化
            3.2.7 mutable
            3.2.8 スライシング
            3.2.9 オブジェクトの所有権
            3.2.10 オブジェクトのライフタイム

4回目 07/11/2019
    プログラミング規約(pdf資料 3章)
        3.3 関数/メンバ関数
            3.3.1 クラス外関数
            3.3.2 メンバ関数

    プログラミング規約(pdf資料 3章)
        3.3 関数/メンバ関数
            3.3.1 クラス外関数
            3.3.2 メンバ関数
            3.3.3 クラス外関数/メンバ関数共通

5回目 02/18/2020
    4回目から期間が開いてしまったので、プログラミング規約(pdf資料 3章)最初からの復習

    プログラミング規約(pdf資料 3章)
        3.3 関数/メンバ関数
            3.3.3 クラス外関数/メンバ関数共通

6回目 04/17/2020
    プログラミング規約(pdf資料 3章)
        3.4 構文
        3.5 演算子
        3.6 プリプロセッサ命令
        3.7 ヘッダファイル、.cppファイル
        3.8 スコープ
        3.9 ランタイムの効率
        3.10 その他
        3.11 まとめ

7回目 05/28/2020
    命名規則(pdf資料 5章)
        5.1 命名三原則
        5.2 言葉の対称性
        5.3 禁止事項
        5.4 ファイル名
        5.5 型名
        5.6 enum型名
        5.7 定数の名前
        5.8 メンバ変数名
        5.9 structのメンバ変数名
        5.10 メンバ関数
        5.11 namespace
        5.12 その他

    4 コーディングスタイル
    5 命名規則(pdf資料 5章)
    6 コメント
    2.10 SOLID 

8回目 06/11/2020
    デザインパターンの説明の前にオブジェクト指向の原則を説明する
    (以前2章の説明の時にはスキップした内容)

    SOLID(pdf資料 2章)
        2.10.1 単一責任の原則 (SRP)
        2.10.2 オープン・クローズドの原則 (OCP)
        2.10.3 リスコフの置換原則 (LSP)
        2.10.4 インターフェース分離の原則 (ISP)
        2.10.5 依存関係逆転の原則 (DIP)

        7.1 ガード節
        7.2 enumでのビットマスク表現
        7.3 pimplイデオム
        7.4 Accessor
        7.5 immutable
        7.6 cloneイデオム

        7.7 NVI(non virtual interface)
        7.8 newのオーバーロード
        7.9 RAII(scoped guard)
        7.10 Future
        7.11 DI(dependency injection)
        7.12 Singleton
        7.13 State
        7.14 Null Object

9回目 07/02/2020
    デザインパターン(pdf資料 7章)
        7.3 pimplイデオム
        7.4 Accessor
        7.5 immutable
        7.6 cloneイデオム
        7.7 NVI(non virtual interface)イデオム
        7.8 newのオーバーロード

10回目 08/06/2020
    デザインパターン(pdf資料 7章)
        7.1 ガード節
        7.2 enumでのビットマスク表現
        7.9 RAII(scoped guard)
        7.10 DI(dependency injection)
        7.11 Singleton
        7.12 State
        7.13 Null Object

11回目 09/10/2020
    デザインパターン(pdf資料 7章)
        7.14 Templateメソッド
        7.15 Factory
        7.16 Proxy
        7.17 Strategy
        7.18 Visitor
        7.19 Observer
        7.20 MVC

    programming_q_ref.md
    プログラミング規約の復習

12回目 10/01/2020
    開発プロセスとインフラ(pdf資料 8章)
        8.1 プロセス
        8.2 アジャイル系プロセスのプラクティスとインフラ
        8.2.1 自動UT

13回目 11/05/2020
    開発プロセスとインフラ(pdf資料 8章)
        8.2.2 リファクタリング

14回目
    開発プロセスとインフラ(pdf資料 8章)
        8.2.3 自動IT
        8.2.4 TDD
        8.2.5 CI(継続的インテグレーション)

